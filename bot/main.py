import telebot
import random
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# –Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Ç–∞ —É—Ç–∏–ª—ñ—Ç
from config import TOKEN, rozklad, ebooks_8
from utils import *

bot = telebot.TeleBot(TOKEN)
user_states = {}
ebooks_8_list = list(ebooks_8.items())

# ------------------ –°–¢–ê–†–¢ ------------------
@bot.message_handler(commands=['start'])
def start(message):
    get_user_data(message.from_user)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(KeyboardButton("üé≤ –í–∏–ø–∞–¥–∫–æ–≤–∏–π —É—á–µ–Ω—å"), KeyboardButton("üìÖ –†–æ–∑–∫–ª–∞–¥"))
    markup.row(KeyboardButton("üìñ –û–Ω–ª–∞–π–Ω –ø—ñ–¥—Ä—É—á–Ω–∏–∫–∏"), KeyboardButton("üîî –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤"))
    markup.row(KeyboardButton("üìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"))
    
    bot.send_message(
        message.chat.id,
        "üëã –í—ñ—Ç–∞—é! –Ø –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –±–æ—Ç\n\n"
        "üîπ –í–∏–ø–∞–¥–∫–æ–≤–∏–π —É—á–µ–Ω—å - –¥–ª—è –≤—á–∏—Ç–µ–ª—ñ–≤\n"
        "üîπ –†–æ–∑–∫–ª–∞–¥ - —Ä–æ–∑–∫–ª–∞–¥ –∑–∞–Ω—è—Ç—å 5-8 –∫–ª–∞—Å—ñ–≤\n"
        "üîπ –û–Ω–ª–∞–π–Ω –ø—ñ–¥—Ä—É—á–Ω–∏–∫–∏ - –ø—ñ–¥—Ä—É—á–Ω–∏–∫–∏ 8 –∫–ª–∞—Å—É\n"
        "üîπ –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ - —Ä–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤ —Ç–∞ –ø–µ—Ä–µ—Ä–≤\n"
        "üîπ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è - –∫–æ—Ä–∏—Å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
        reply_markup=markup
    )

# ------------------ –†–û–ó–ö–õ–ê–î –î–ó–í–Ü–ù–ö–Ü–í ------------------
@bot.message_handler(commands=['rozklad_bells'])
def rozklad_bells_command(message):
    show_bells_schedule(message)

@bot.message_handler(func=lambda m: m.text == "üîî –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤")
def rozklad_bells_button(message):
    show_bells_schedule(message)

def show_bells_schedule(message):
    from config import ROZKLAD_BELLS
    
    bells_text = "üîî –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ —Ç–∞ –ø–µ—Ä–µ—Ä–≤:\n\n"
    
    for lesson, time in ROZKLAD_BELLS:
        if "–ø–µ—Ä–µ—Ä–≤–∞" in lesson:
            bells_text += f"üîÑ {lesson}: {time}\n"
        else:
            bells_text += f"üìö {lesson}: {time}\n"
    
    bells_text += "\n‚è∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è: 6:50 –≥–æ–¥"
    bot.send_message(message.chat.id, bells_text)

# ------------------ –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø ------------------
@bot.message_handler(func=lambda m: m.text == "üìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
def info(message):
    info_text = (
        "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞:\n\n"
        "üé≤ –í–∏–ø–∞–¥–∫–æ–≤–∏–π —É—á–µ–Ω—å - –¥–ª—è –≤—á–∏—Ç–µ–ª—ñ–≤\n"
        "üìÖ –†–æ–∑–∫–ª–∞–¥ - —Ä–æ–∑–∫–ª–∞–¥ –∑–∞–Ω—è—Ç—å 5-8 –∫–ª–∞—Å—ñ–≤\n"
        "üìñ –û–Ω–ª–∞–π–Ω –ø—ñ–¥—Ä—É—á–Ω–∏–∫–∏ - –ø—ñ–¥—Ä—É—á–Ω–∏–∫–∏ 8 –∫–ª–∞—Å—É\n"
        "üîî –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ - —Ä–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤ —Ç–∞ –ø–µ—Ä–µ—Ä–≤\n\n"
        "üìû –ï–∫—Å—Ç—Ä–µ–Ω—ñ —Å–ª—É–∂–±–∏:\n"
        "‚Ä¢ 101 - –ü–æ–∂–µ–∂–Ω–∞\n‚Ä¢ 102 - –ü–æ–ª—ñ—Ü—ñ—è\n"
        "‚Ä¢ 103 - –®–≤–∏–¥–∫–∞\n‚Ä¢ 104 - –ì–∞–∑–æ–≤–∞"
    )
    bot.send_message(message.chat.id, info_text)

# ------------------ –û–ù–õ–ê–ô–ù –ü–Ü–î–†–£–ß–ù–ò–ö–ò ------------------
@bot.message_handler(commands=['online_books'])
def online_books(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("8 –∫–ª–∞—Å", callback_data="ebook_8"))
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—ñ–¥—Ä—É—á–Ω–∏–∫—ñ–≤:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üìñ –û–Ω–ª–∞–π–Ω –ø—ñ–¥—Ä—É—á–Ω–∏–∫–∏")
def online_books_btn(message):
    online_books(message)

@bot.callback_query_handler(func=lambda call: call.data == "ebook_8")
def callback_ebook_8(call):
    markup = InlineKeyboardMarkup(row_width=2)
    for i, (subject_name, url) in enumerate(ebooks_8_list):
        callback_data = f"book_{i}"
        markup.add(InlineKeyboardButton(subject_name, callback_data=callback_data))
    bot.send_message(call.message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—ñ–¥—Ä—É—á–Ω–∏–∫–∞ 8 –∫–ª–∞—Å—É:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("book_"))
def callback_book(call):
    try:
        index = int(call.data[len("book_"):])
        if 0 <= index < len(ebooks_8_list):
            subject_name, url = ebooks_8_list[index]
            message_text = f"üìö {subject_name}\n\nüîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—ñ–¥—Ä—É—á–Ω–∏–∫:\n{url}"
            bot.send_message(call.message.chat.id, message_text)
        else:
            bot.send_message(call.message.chat.id, "‚ùå –ü—ñ–¥—Ä—É—á–Ω–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except (ValueError, IndexError):
        bot.send_message(call.message.chat.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –ø—ñ–¥—Ä—É—á–Ω–∏–∫–∞.")
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")

# ------------------ –†–û–ó–ö–õ–ê–î ------------------
@bot.message_handler(commands=['rozklad'])
def command_rozklad(message):
    markup = InlineKeyboardMarkup()
    for cls, icon in [("5","üìò"),("6","üìó"),("7","üìï"),("8","üìô")]:
        markup.add(InlineKeyboardButton(f"{icon} {cls} –∫–ª–∞—Å", callback_data=f"rozklad_class_{cls}"))
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üìÖ –†–æ–∑–∫–ª–∞–¥")
def rozklad_start_btn(message):
    command_rozklad(message)

# ------------------ –í–ò–ü–ê–î–ö–û–í–ò–ô –£–ß–ï–ù–¨ ------------------
@bot.message_handler(commands=['random_child'])
def command_random_child(message):
    user_data = get_user_data(message.from_user)
    classes = user_data["classes"]
    if not classes:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∫–ª–∞—Å—ñ–≤. –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –∫–ª–∞—Å —á–µ—Ä–µ–∑ /add_class!")
        return
    markup = InlineKeyboardMarkup()
    for c in classes.keys():
        markup.add(InlineKeyboardButton(c, callback_data=f"random_child_{sanitize_callback_data(c)}"))
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –¥–ª—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –≤–∏–±–æ—Ä—É —É—á–Ω—è:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üé≤ –í–∏–ø–∞–¥–∫–æ–≤–∏–π —É—á–µ–Ω—å")
def random_start_btn(message):
    command_random_child(message)

# ------------------ –î–û–î–ê–í–ê–ù–ù–Ø –ö–õ–ê–°–Ü–í ------------------
@bot.message_handler(commands=['add_class'])
def add_class(message):
    user_states[message.from_user.id] = {'action': 'add_class'}
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É(–∏) –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—É(—ñ–≤) —á–µ—Ä–µ–∑ –∫–æ–º—É:")

# ------------------ –î–û–î–ê–í–ê–ù–ù–Ø –£–ß–ù–Ü–í ------------------
@bot.message_handler(commands=['add_children'])
def add_child_step(message):
    user_data = get_user_data(message.from_user)
    if not user_data["classes"]:
        bot.send_message(message.chat.id, "–°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –∫–ª–∞—Å —á–µ—Ä–µ–∑ /add_class!")
        return
    markup = InlineKeyboardMarkup()
    for c in user_data["classes"].keys():
        markup.add(InlineKeyboardButton(c, callback_data=f"add_child_{sanitize_callback_data(c)}"))
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —É—á–Ω—ñ–≤:", reply_markup=markup)

# ------------------ –°–ü–ò–°–û–ö –ö–õ–ê–°–Ü–í ------------------
@bot.message_handler(commands=['list_class'])
def list_class(message):
    user_data = get_user_data(message.from_user)
    classes = user_data["classes"]
    if not classes:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∫–ª–∞—Å—ñ–≤.")
    else:
        send_long_message(bot, message.chat.id, "–í–∞—à—ñ –∫–ª–∞—Å–∏:\n" + "\n".join(classes.keys()))

# ------------------ –°–ü–ò–°–û–ö –£–ß–ù–Ü–≤ ------------------
@bot.message_handler(commands=['list_children'])
def list_children(message):
    user_data = get_user_data(message.from_user)
    if not user_data["classes"]:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∫–ª–∞—Å—ñ–≤.")
        return
    markup = InlineKeyboardMarkup()
    for c in user_data["classes"].keys():
        markup.add(InlineKeyboardButton(c, callback_data=f"list_children_{sanitize_callback_data(c)}"))
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —É—á–Ω—ñ–≤:", reply_markup=markup)

# ------------------ –í–ò–î–ê–õ–ï–ù–ù–Ø –ö–õ–ê–°–£ ------------------
@bot.message_handler(commands=['delete_class'])
def delete_class_step(message):
    user_data = get_user_data(message.from_user)
    if not user_data["classes"]:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –∫–ª–∞—Å—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
        return
    markup = InlineKeyboardMarkup()
    for c in user_data["classes"].keys():
        markup.add(InlineKeyboardButton(c, callback_data=f"delete_class_{sanitize_callback_data(c)}"))
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=markup)

# ------------------ –í–ò–î–ê–õ–ï–ù–ù–Ø –£–ß–ù–Ø ------------------
@bot.message_handler(commands=['delete_child'])
def delete_child_step(message):
    user_data = get_user_data(message.from_user)
    if not user_data["classes"]:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –∫–ª–∞—Å—ñ–≤!")
        return
    markup = InlineKeyboardMarkup()
    for c in user_data["classes"].keys():
        markup.add(InlineKeyboardButton(c, callback_data=f"delete_child_class_{sanitize_callback_data(c)}"))
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —É—á–Ω—è:", reply_markup=markup)

# ------------------ CALLBACK –û–ë–†–û–ë–ö–ê ------------------
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    data_file = load_data()
    user_id = str(call.from_user.id)
    user_data = get_user_data(call.from_user)
    classes = user_data["classes"]
    data = call.data

    # –û–±—Ä–æ–±–∫–∞ —Ä–æ–∑–∫–ª–∞–¥—É
    if data.startswith("rozklad_class_"):
        class_no = data[len("rozklad_class_"):]
        days = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü'—è—Ç–Ω–∏—Ü—è"]
        markup = InlineKeyboardMarkup()
        for d in days:
            day_key = d.replace("'", "").replace(" ", "_")
            markup.add(InlineKeyboardButton(d, callback_data=f"rozklad_day_{class_no}_{day_key}"))
        bot.send_message(call.message.chat.id, f"üìÖ –†–æ–∑–∫–ª–∞–¥ ‚Äî {class_no} –∫–ª–∞—Å. –û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:", reply_markup=markup)
        return

    if data.startswith("rozklad_day_"):
        parts = data.split("_", 3)
        try:
            _, _, class_no, day_key = parts
        except ValueError:
            bot.send_message(call.message.chat.id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–æ–∑–∫–ª–∞–¥—É.")
            return
            
        class_sched = rozklad.get(class_no)
        if not class_sched:
            bot.send_message(call.message.chat.id, f"‚ùå –†–æ–∑–∫–ª–∞–¥ –¥–ª—è {class_no} –∫–ª–∞—Å—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
            
        found_day = None
        for d in class_sched.keys():
            key = d.replace("'", "").replace(" ", "_")
            if key == day_key:
                found_day = d
                break
                
        if not found_day:
            bot.send_message(call.message.chat.id, "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–æ–∑–∫–ª–∞–¥—É –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è.")
            return
            
        lessons = class_sched.get(found_day, [])
        if not lessons:
            bot.send_message(call.message.chat.id, f"‚ÑπÔ∏è –£ {class_no} –∫–ª–∞—Å—ñ –Ω–µ–º–∞—î —É—Ä–æ–∫—ñ–≤ –Ω–∞ {found_day}.")
            return
            
        text = f"üìö –†–æ–∑–∫–ª–∞–¥ –¥–ª—è {class_no} –∫–ª–∞—Å—É ({found_day}):\n"
        for i, lesson in enumerate(lessons, start=1):
            text += f"{i}. {lesson}\n"
        send_long_message(bot, call.message.chat.id, text)
        return

    # –í–∏–ø–∞–¥–∫–æ–≤–∏–π —É—á–µ–Ω—å
    if data.startswith("random_child_"):
        class_name_encoded = data[len("random_child_"):]
        class_name = None
        for c in classes.keys():
            if sanitize_callback_data(c) == class_name_encoded:
                class_name = c
                break
        
        if class_name and class_name in classes and classes[class_name]:
            chosen = random.choice(classes[class_name])
            bot.send_message(call.message.chat.id, f"üéâ –í–∏–ø–∞–¥–∫–æ–≤–æ –æ–±—Ä–∞–Ω–æ: {chosen} üéâ")
        else:
            bot.send_message(call.message.chat.id, f"‚ùå –£ –∫–ª–∞—Å—ñ {class_name} –Ω–µ–º–∞—î —É—á–Ω—ñ–≤!")
        return

    # –Ü–Ω—à—ñ callback-–∏ (–¥–æ–¥–∞–≤–∞–Ω–Ω—è, –≤–∏–¥–∞–ª–µ–Ω–Ω—è, —Å–ø–∏—Å–æ–∫)
    if data.startswith("add_child_"):
        class_name_encoded = data[len("add_child_"):]
        class_name = None
        for c in classes.keys():
            if sanitize_callback_data(c) == class_name_encoded:
                class_name = c
                break
        
        if class_name:
            user_states[int(user_id)] = {'action': 'add_child_wait_name', 'class': class_name}
            bot.send_message(call.message.chat.id, f"–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è(–∞) —É—á–Ω—è(—ñ–≤) –¥–ª—è –∫–ª–∞—Å—É {class_name} —á–µ—Ä–µ–∑ –∫–æ–º—É:")
        else:
            bot.send_message(call.message.chat.id, "‚ùå –ö–ª–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    if data.startswith("list_children_"):
        class_name_encoded = data[len("list_children_"):]
        class_name = None
        for c in classes.keys():
            if sanitize_callback_data(c) == class_name_encoded:
                class_name = c
                break
        
        if class_name and class_name in classes and classes[class_name]:
            send_long_message(bot, call.message.chat.id, f"üë• –£—á–Ω—ñ –∫–ª–∞—Å—É {class_name}:\n" + "\n".join(classes[class_name]))
        else:
            bot.send_message(call.message.chat.id, f"‚ùå –£ –∫–ª–∞—Å—ñ {class_name} —â–µ –Ω–µ–º–∞—î —É—á–Ω—ñ–≤.")
        return

    if data.startswith("delete_class_"):
        class_name_encoded = data[len("delete_class_"):]
        class_name = None
        for c in classes.keys():
            if sanitize_callback_data(c) == class_name_encoded:
                class_name = c
                break
        
        if class_name and class_name in classes:
            classes.pop(class_name, None)
            data_file[user_id] = user_data
            save_data(data_file)
            bot.send_message(call.message.chat.id, f"‚úÖ –ö–ª–∞—Å {class_name} –≤–∏–¥–∞–ª–µ–Ω–æ!")
        else:
            bot.send_message(call.message.chat.id, "‚ùå –ö–ª–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    if data.startswith("delete_child_class_"):
        class_name_encoded = data[len("delete_child_class_"):]
        class_name = None
        for c in classes.keys():
            if sanitize_callback_data(c) == class_name_encoded:
                class_name = c
                break
        
        if class_name and class_name in classes and classes[class_name]:
            markup = InlineKeyboardMarkup()
            for student in classes[class_name]:
                markup.add(InlineKeyboardButton(student, callback_data=f"delete_child_{sanitize_callback_data(class_name)}_{sanitize_callback_data(student)}"))
            bot.send_message(call.message.chat.id, f"–û–±–µ—Ä—ñ—Ç—å —É—á–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –∫–ª–∞—Å—É {class_name}:", reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, f"‚ùå –£ –∫–ª–∞—Å—ñ {class_name} –Ω–µ–º–∞—î —É—á–Ω—ñ–≤!")
        return

    if data.startswith("delete_child_"):
        try:
            parts = data.split("_", 2)
            if len(parts) < 3:
                raise ValueError
            _, class_name_encoded, student_name_encoded = parts
        except ValueError:
            bot.send_message(call.message.chat.id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.")
            return
        
        class_name = None
        student_name = None
        
        for c in classes.keys():
            if sanitize_callback_data(c) == class_name_encoded:
                class_name = c
                break
        
        if class_name and class_name in classes:
            for s in classes[class_name]:
                if sanitize_callback_data(s) == student_name_encoded:
                    student_name = s
                    break
        
        if class_name and student_name and student_name in classes[class_name]:
            classes[class_name].remove(student_name)
            data_file[user_id] = user_data
            save_data(data_file)
            bot.send_message(call.message.chat.id, f"‚úÖ –£—á–µ–Ω—å {student_name} –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ –∫–ª–∞—Å—É {class_name}!")
        else:
            bot.send_message(call.message.chat.id, f"‚ùå –£—á–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–ª–∞—Å—ñ {class_name}!")
        user_states.pop(int(user_id), None)
        return

# ------------------ –û–ë–†–û–ë–ö–ê –°–¢–ê–ù–Ü–í ------------------
@bot.message_handler(func=lambda m: m.from_user.id in user_states)
def handle_state_messages(message):
    state = user_states.get(message.from_user.id)
    if not message.text or message.text.startswith("/") or not is_valid_name(message.text):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –Ω–∞–∑–≤–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
        
    data = load_data()
    user_data = get_user_data(message.from_user)
    classes = user_data["classes"]

    if state['action'] == 'add_class':
        added = []
        for c in map(str.strip, message.text.split(",")):
            if is_valid_name(c) and c not in classes:
                classes[c] = []
                added.append(c)
        data[str(message.from_user.id)] = user_data
        save_data(data)
        if added:
            send_long_message(bot, message.chat.id, f"‚úÖ –î–æ–¥–∞–Ω—ñ –∫–ª–∞—Å–∏: {', '.join(added)}")
        else:
            bot.send_message(message.chat.id, "‚ùå –í—Å—ñ —Ü—ñ –∫–ª–∞—Å–∏ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å –∞–±–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ.")
        user_states.pop(message.from_user.id, None)

    elif state['action'] == 'add_child_wait_name':
        class_name = state['class']
        if class_name not in classes:
            bot.send_message(message.chat.id, f"‚ùå –ö–ª–∞—Å {class_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            user_states.pop(message.from_user.id, None)
            return
            
        added = [s for s in map(str.strip, message.text.split(",")) if is_valid_name(s)]
        if added:
            classes[class_name].extend(added)
            data[str(message.from_user.id)] = user_data
            save_data(data)
            send_long_message(bot, message.chat.id, f"‚úÖ –î–æ–¥–∞–Ω—ñ —É—á–Ω—ñ –¥–æ {class_name}: {', '.join(added)}")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ –¥–æ–¥–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —É—á–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–º–µ–Ω–∞.")
        user_states.pop(message.from_user.id, None)

# –î–æ–¥–∞–π—Ç–µ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Mini App
def generate_mini_app_url():
    return "https://telegram-school-bot.vercel.app/"

# –û–Ω–æ–≤—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é start
@bot.message_handler(commands=['start'])
def start(message):
    get_user_data(message.from_user)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(KeyboardButton("üé≤ –í–∏–ø–∞–¥–∫–æ–≤–∏–π —É—á–µ–Ω—å"), KeyboardButton("üìÖ –†–æ–∑–∫–ª–∞–¥"))
    markup.row(KeyboardButton("üìñ –û–Ω–ª–∞–π–Ω –ø—ñ–¥—Ä—É—á–Ω–∏–∫–∏"), KeyboardButton("üîî –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤"))
    markup.row(KeyboardButton("üìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"), KeyboardButton("üì± Mini App"))
    
    mini_app_url = generate_mini_app_url()
    
    bot.send_message(
        message.chat.id,
        f"üëã –í—ñ—Ç–∞—é! –Ø –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –±–æ—Ç\n\n"
        f"üîπ –í–∏–ø–∞–¥–∫–æ–≤–∏–π —É—á–µ–Ω—å - –¥–ª—è –≤—á–∏—Ç–µ–ª—ñ–≤\n"
        f"üîπ –†–æ–∑–∫–ª–∞–¥ - —Ä–æ–∑–∫–ª–∞–¥ –∑–∞–Ω—è—Ç—å 5-8 –∫–ª–∞—Å—ñ–≤\n"
        f"üîπ –û–Ω–ª–∞–π–Ω –ø—ñ–¥—Ä—É—á–Ω–∏–∫–∏ - –ø—ñ–¥—Ä—É—á–Ω–∏–∫–∏ 8 –∫–ª–∞—Å—É\n"
        f"üîπ –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ - —Ä–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤ —Ç–∞ –ø–µ—Ä–µ—Ä–≤\n"
        f"üîπ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è - –∫–æ—Ä–∏—Å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è\n"
        f"üîπ Mini App - –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π –≤–µ–±-–¥–æ–¥–∞—Ç–æ–∫\n\n"
        f"üåê Mini App: {mini_app_url}",
        reply_markup=markup
    )

# –î–æ–¥–∞–π—Ç–µ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è Mini App
@bot.message_handler(func=lambda m: m.text == "üì± Mini App")
def mini_app_button(message):
    mini_app_url = generate_mini_app_url()
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üì± –í—ñ–¥–∫—Ä–∏—Ç–∏ Mini App", url=mini_app_url))
    
    bot.send_message(
        message.chat.id,
        f"üåê –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ Mini App:\n{mini_app_url}",
        reply_markup=markup
    )

# –î–æ–¥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
@bot.message_handler(commands=['webapp'])
def webapp_command(message):
    mini_app_url = generate_mini_app_url()
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üì± –í—ñ–¥–∫—Ä–∏—Ç–∏ Mini App", url=mini_app_url))
    
    bot.send_message(
        message.chat.id,
        f"üåê Mini App –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n{mini_app_url}",
        reply_markup=markup
    )

# ------------------ –ù–ï–í–Ü–î–û–ú–Ü –ö–û–ú–ê–ù–î–ò ------------------
@bot.message_handler(func=lambda m: m.text and m.text.startswith("/"))
def unknown_command(message):
    bot.send_message(message.chat.id, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥")

# ------------------ –û–ë–†–û–ë–ö–ê –Ü–ù–®–ò–• –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ ------------------
@bot.message_handler(func=lambda m: True)
def handle_other_messages(message):
    if message.text.startswith('/'):
        unknown_command(message)
    else:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∞–±–æ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó")

# ------------------ –ó–ê–ü–£–°–ö ------------------
if __name__ == "__main__":
    print("üöÄ –ù–∞–≤—á–∞–ª—å–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    print("‚úÖ –ú–æ–¥—É–ª—å –Ω–∞–≤—á–∞–Ω–Ω—è: –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")
    print("‚úÖ –ú–æ–¥—É–ª—å —Ä–æ–∑–∫–ª–∞–¥—É: –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")
    print("‚úÖ –ú–æ–¥—É–ª—å –¥–∑–≤—ñ–Ω–∫—ñ–≤: –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")
    print("üîî –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏...")
    
    bot.infinity_polling()
